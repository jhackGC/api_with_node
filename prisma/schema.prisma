// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  username  String   @unique
  password  String

  products Product[] // One user can have many products
}

model Product {
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  name        String
  belongsTo   User            @relation(fields: [belongsToId], references: [id])
  belongsToId String
  updates     ProductUpdate[] // One product can have many updates
}

enum PRODUCT_UPDATE_STATUS {
  IN_PROGRESS
  LIVE
  DEPRECATED
  ARCHIVED
}

model ProductUpdate {
  id        String                @id @default(uuid())
  createdAt DateTime              @default(now())
  updatedAt DateTime
  title     String                @db.VarChar(255)
  body      String
  status    PRODUCT_UPDATE_STATUS @default(IN_PROGRESS)
  version   String?
  asset     String

  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  updatePoints UpdatePoint[] // One update can have many update points
}

model UpdatePoint {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime

  name        String @db.VarChar(255)
  description String

  updateId String
  update   ProductUpdate @relation(fields: [updateId], references: [id])
}
